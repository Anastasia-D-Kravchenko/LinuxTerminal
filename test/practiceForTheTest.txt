Shell Scripting Fundamentals ✅ ✅ ✅
Review Shell Syntax: ✅ ✅ 
Study variable assignment and usage (e.g., C=$A+$B, D=$(($A+$B))).   ✅ 
Practice using if, elif, and else conditional statements.   ✅ 
Understand how to use for and while loops.   ✅ 
Pay attention to command-line arguments and how to access them (e.g., $1, $#, $@).   ✅ 
Mastering Conditional Expressions: ✅ ✅
Familiarize yourself with the syntax for file tests (e.g., -f, -z).   ✅
Practice using string comparisons (e.g., =, !=) and integer comparisons (e.g., -gt, -lt, -eq, -ne).   ✅
Understand how to combine conditions using -a (and) and -o (or).   ✅

Commands and Utilities ✅ ✅ ✅ 
File Manipulation: ✅ ✅
Practice using head, tail, sort, uniq, cut, find, mv, rm.   ✅
Understand how to redirect input and output (e.g., <, >, >>, 2>>).   ✅
Review file permissions and how to change them with chmod.   ✅
Text Processing: ✅ ✅
Practice using grep and egrep for pattern matching.   ✅
Understand how to use wc to count lines, words, and characters.   ✅
General Commands: ✅ ✅
Memorize the basic functions of commands like ls, mkdir, touch, cat, cd, vi, man, clear, nl, file, tr, let, rmdir, and cp.   ✅


Text Example 1:  data.txt ✅ 
apple,10,red,sweet
banana,5,yellow,sweet
orange,12,orange,tart
grape,25,purple,tart
apple,8,green,sour
kiwi,15,brown,sour
banana,7,yellow,sweet

Text Example 2: logs.txt
2024-07-20 10:00:01 - User logged in: user123
2024-07-20 10:05:22 - File accessed: /home/user123/document.txt
2024-07-20 10:12:48 - Error: Connection timeout
2024-07-20 11:01:15 - User logged out: user123
2024-07-21 09:22:30 - User logged in: guest
2024-07-21 09:28:45 - File accessed: /var/log/system.log
2024-07-21 10:15:00 - Warning: Disk space low
2024-07-21 11:59:59 - User logged out: guest

Text Example 3: names.txt
John Smith
Alice Wonderland
Bob The Builder
Carol Danvers
Peter Parker
Bruce Wayne

Text Example 4: numbers.txt
1
10
100
1000
10000
2
20
200
2000

Example Exercises Using These Texts ✅ 
Using data.txt
Extract fruit names: Write a command to extract only the fruit names from data.txt.
Filter by color: Write a script to ask the user for a color and then print all lines from data.txt that match that color.
Calculate total quantity: Write a script to calculate the total quantity of all fruits.
Find the sweetest fruit: Write a script to determine which fruit is listed as "sweet" and has the highest quantity. (Similar to the "biggest line" example in codeInShell.txt but applied to different criteria)
Count unique fruits: Write a command to list the unique fruit names.

Using logs.txt
Find login/logout times for a user: Write a script that takes a username as input and prints the login and logout times for that user.
Count error/warning messages: Write a command to count the number of lines containing "Error" or "Warning".
Extract file paths: Write a command to extract the file paths accessed (e.g., /home/user123/document.txt).
Find the latest event: Write a command to display the last line of the log file.
Analyze user activity: Write a script to determine how many unique users are in the log file.

Using names.txt
Extract first names: Write a command to extract the first names.
Reverse the names: Write a script to print the names in the format "Smith, John".
Count names with a specific letter: Write a script to count how many names contain the letter "a" (case-insensitive).
Print names in uppercase: Write a command to print all names in uppercase.
Sort names alphabetically: Write a command to sort the names alphabetically.

Using numbers.txt
Calculate the sum: Write a script to calculate the sum of all numbers.
Find numbers greater than a value: Write a script that takes a number as input and prints all numbers from the file greater than that number.
Find the average: Write a script to calculate the average of the numbers.
Find the largest and smallest number: Write a script to determine the largest and smallest numbers.
Filter even numbers: Write a script to print only the even numbers from the file.





				Practise with ready-made
1. ls (List directory contents)
Basic usage:
Bash
ls ❗
This will list the files and directories in your current working directory.
Long listing:
Bash
ls -l ❗
This provides more detailed information, including permissions, owner, size, and modification date. (As potentially shown in the image prompt).

2. mkdir (Create directories)
Basic usage:
Bash
mkdir new_directory ❗
This creates a directory named new_directory in your current location.

3. touch (Create empty files or update timestamps)
Create a file:
Bash
touch new_file.txt ❗
This creates an empty file named new_file.txt.

4. cat (Concatenate and display files)
Display a file's content:
Bash
cat file.txt ❗
This will print the contents of file.txt to your terminal.

5. cd (Change directory)
Go to a specific directory:
Bash
cd Documents ❗
This changes your current directory to the Documents directory.
Go back to the previous directory:
Bash
cd - ❗
Go to your home directory:
Bash
cd ~ ❗
or just:
Bash
cd ❗

6. man (Display manual pages)
Get help for a command:
Bash
man ls ❗
This will display the manual page for the ls command, explaining its options and usage.

7. chmod (Change file permissions)
Grant read permission to the user for myfile.txt (from codeInShell.txt):
Bash
chmod u+r myfile.txt ❗

8. wc (Word count)
Count lines in a file (from codeInShell.txt):
Bash
n=$(wc -l < file.txt) ❗
echo "$n" ❗
This counts the number of lines in file.txt and stores the result in the variable n.
Count characters in a variable (from codeInShell.txt):
Bash
lines="some text here" ❗
chars=$(echo "$lines" | wc -m) ❗
echo "$chars" ❗

9. head (Output the first part of files)
Display the first 4 lines of file.txt (from codeInShell.txt):
Bash
head -n 4 file.txt ❗
or
Bash
T=$(head -4 file.txt) ❗
echo "$T"❗

10. tail (Output the last part of files)
Display the last 3 lines of the output of head -n 5 file.txt (from codeInShell.txt):
Bash
head -n 5 file.txt | tail -n 3 ❗

11. sort (Sort lines of text files)
Sort the contents of file.txt and output to result.txt (from codeInShell.txt):
Bash
sort "file.txt" > result.txt ❗

12. uniq (Remove duplicate lines)
Sort file.txt and remove duplicate lines, saving to result.txt (from codeInShell.txt):
Bash
sort "file.txt" | uniq > result.txt ❗

13. cut (Remove sections from each line of files)
Example (not directly in your snippets, but common):
Bash
cut -d':' -f1 /etc/passwd ❗
This would cut the /etc/passwd file, using : as a delimiter, and display only the first field (usernames).

14. nl (Number lines of files)
Basic usage:
Bash
nl file.txt ❗
This will number the lines of file.txt.

15. file (Determine file type)
Check the type of myfile.txt:
Bash
file myfile.txt ❗
This will tell you if it's a regular file, directory, etc.

16. find (Find files and directories)
Find files named like $1 in your home directory (from codeInShell.txt):
Bash 
find ~ -name "$1" ❗
If you ran a script with ./my_script report.txt, this would find files named report.txt in your home directory.
Find regular files named t*.txt in the current directory (from codeInShell.txt):
Bash
find ./ -type f -name 't*.txt' ❗

17. tr (Translate or delete characters)
Example (not directly in your snippets, but common):
Bash
echo "lowercase" | tr '[:lower:]' '[:upper:]' ❗
This would translate all lowercase characters to uppercase, outputting "LOWERCASE".

18. let (Perform arithmetic operations)
Add two variables (from codeInShell.txt):
Bash 
A=5 ❗
B=10 ❗
let C=$A+$B ❗
echo "$C" # Output: 15 ❗
D=$(($A+$B)) # Another way to do arithmetic expansion ❗
echo "$D" # Output: 15 ❗
Increment a variable (from codeInShell.txt):
Bash
i=0 ❗
while [ $i -lt 5 ]; do ❗
    echo "$i" ❗
    ((i+=1)) # Arithmetic increment ❗
done ❗
or 
Bash
i=0 ❗
while [ $i -lt 5 ]; do ❗
    echo "$i" ❗
    let i=i+1 # Using let for increment ❗
done ❗
Integer division (from codeInShell.txt): ❗
Bash
result=100 ❗
i=0 ❗
while [ $i -lt 2 ]; do ❗
    ((i+=1)) ❗
    let result=$result/2 ❗
    echo "$result" # Output: 50, 25 ❗
done ❗

19. rm (Remove files or directories)
Remove a file (from codeInShell.txt):
Bash
f="temp.txt" ❗
# ... some operations ... 
rm "$f" ❗
Use rm with caution! It permanently deletes files.

20. rmdir (Remove empty directories)
Remove an empty directory:
Bash  
rmdir empty_directory ❗
This will only work if empty_directory is indeed empty.

21. cp (Copy files and directories)
Copy a file:
Bash
cp source.txt destination.txt ❗
Copy a directory recursively (to include its contents):
Bash
cp -r source_directory destination_directory ❗

22. for (Looping construct)
Loop through words in a string (from codeInShell.txt):
Bash
for l in $(cat file.txt); do ❗
    echo "Word: $l" ❗
done ❗
Loop through command-line arguments (from codeInShell.txt):
Bash
for arg in "$@"; do ❗
    echo "Argument: $arg" ❗
done ❗
Loop through files matching a pattern (from codeInShell.txt):
Bash
for i in *.txt; do ❗
    egrep '^a.{9}' "$i" ❗
done ❗
Loop through a sequence of numbers (from codeInShell.txt):
Bash
lines="some\ntext\nhere" ❗
for i in $(seq 0 $(($(echo "$lines" | wc -m) - 1))); do ❗
    char="${lines:i:1}" ❗
    echo "Position $i: $char" ❗
done ❗

23. while (Looping construct)
Read a file line by line (from codeInShell.txt):
Bash
while read -r line; do ❗
    echo "Line: $line" ❗
done < input.txt ❗
Loop based on a condition (from codeInShell.txt):
Bash
i=0 ❗
while [ $i -lt 5 ]; do ❗
    echo "$i" ❗
    ((i+=1)) ❗
done ❗
Process lines from a command output (from codeInShell.txt):
Bash
lines=$(egrep "^a" "file.txt") ❗
echo "$lines" | while read -r line; do ❗
    echo "Line starting with 'a': $line" ❗
done ❗

24. grep, egrep (Find patterns in text)
Find lines starting with "a" in file.txt (from codeInShell.txt):
Bash
lines=$(egrep "^a" "file.txt") ❗
echo "$lines" ❗
Find lines starting with "c" in $1 (from codeInShell.txt): ❗
Bash
lines=$(egrep "^c" "$1") ❗
Find lines in *.txt files starting with 'a' followed by exactly 9 characters (from codeInShell.txt):
Bash
for i in *.txt; do ❗
    egrep '^a.{9}' "$i" ❗
done ❗